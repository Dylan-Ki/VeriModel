"""
File Analyzer Module

Ph√¢n t√≠ch chi ti·∫øt c·∫•u tr√∫c v√† n·ªôi dung c·ªßa file pickle.
"""

import pickle
import pickletools
import io
from pathlib import Path
from typing import Dict, List

class FileAnalyzer:
    def __init__(self):
        self.analysis_results = {}
        
    def analyze_file(self, file_path: Path) -> Dict:
        """
        Ph√¢n t√≠ch chi ti·∫øt file pickle.
        
        Args:
            file_path: ƒê∆∞·ªùng d·∫´n t·ªõi file c·∫ßn ph√¢n t√≠ch
            
        Returns:
            Dict ch·ª©a k·∫øt qu·∫£ ph√¢n t√≠ch
        """
        if not file_path.exists():
            return {
                "error": f"File kh√¥ng t·ªìn t·∫°i: {file_path}"
            }
            
        try:
            # Th√¥ng tin c∆° b·∫£n v·ªÅ file
            file_info = {
                "name": file_path.name,
                "size": file_path.stat().st_size,
                "format": file_path.suffix,
                "directory": str(file_path.parent)
            }
            
            # Ph√¢n t√≠ch c·∫•u tr√∫c pickle
            structure_info = self._analyze_pickle_structure(file_path)
            
            # Ph√¢n t√≠ch byte sequences
            byte_info = self._analyze_byte_sequences(file_path)
            
            # T·ªïng h·ª£p k·∫øt qu·∫£
            self.analysis_results = {
                "file_info": file_info,
                "structure": structure_info,
                "byte_analysis": byte_info
            }
            
            return self.analysis_results
            
        except Exception as e:
            return {
                "error": f"L·ªói khi ph√¢n t√≠ch file: {str(e)}"
            }
            
    def _analyze_pickle_structure(self, file_path: Path) -> Dict:
        """Ph√¢n t√≠ch c·∫•u tr√∫c v√† protocol c·ªßa pickle."""
        try:
            with open(file_path, 'rb') as f:
                content = f.read()
                
            # Ph√¢n t√≠ch protocol
            protocol = pickle.HIGHEST_PROTOCOL
            if content:
                protocol = content[0] if content[0] <= pickle.HIGHEST_PROTOCOL else -1
                
            # Ph√¢n t√≠ch opcodes
            opcodes = list(pickletools.genops(io.BytesIO(content)))
            opcode_stats = {}
            for op, arg, pos in opcodes:
                if op.name not in opcode_stats:
                    opcode_stats[op.name] = 0
                opcode_stats[op.name] += 1
                
            return {
                "protocol_version": protocol,
                "total_opcodes": len(opcodes),
                "opcode_distribution": opcode_stats,
                "structure_type": self._determine_structure_type(opcodes)
            }
            
        except Exception as e:
            return {"error": f"L·ªói khi ph√¢n t√≠ch c·∫•u tr√∫c: {str(e)}"}
            
    def _analyze_byte_sequences(self, file_path: Path) -> Dict:
        """Ph√¢n t√≠ch chu·ªói bytes trong file."""
        try:
            with open(file_path, 'rb') as f:
                content = f.read()
                
            # Ph√¢n t√≠ch ph√¢n ph·ªëi bytes
            byte_dist = {}
            for b in content:
                if b not in byte_dist:
                    byte_dist[b] = 0
                byte_dist[b] += 1
                
            # T√≠nh entropy
            entropy = self._calculate_entropy(byte_dist, len(content))
            
            return {
                "file_size_bytes": len(content),
                "entropy": entropy,
                "byte_distribution": byte_dist,
                "has_null_bytes": 0 in byte_dist,
                "has_executable_content": self._check_executable_content(content)
            }
            
        except Exception as e:
            return {"error": f"L·ªói khi ph√¢n t√≠ch bytes: {str(e)}"}
            
    def _determine_structure_type(self, opcodes) -> str:
        """X√°c ƒë·ªãnh lo·∫°i c·∫•u tr√∫c d·ªØ li·ªáu trong pickle."""
        opnames = [op[0].name for op in opcodes]
        if 'DICT' in opnames:
            return "Dictionary"
        elif 'LIST' in opnames:
            return "List/Array"
        elif 'GLOBAL' in opnames:
            return "Custom Object"
        else:
            return "Simple Value"
            
    def _calculate_entropy(self, byte_dist: Dict, total_bytes: int) -> float:
        """T√≠nh entropy c·ªßa file d·ª±a tr√™n ph√¢n ph·ªëi bytes."""
        import math
        entropy = 0
        for count in byte_dist.values():
            prob = count / total_bytes
            entropy -= prob * math.log2(prob)
        return entropy
        
    def _check_executable_content(self, content: bytes) -> bool:
        """Ki·ªÉm tra c√≥ d·∫•u hi·ªáu c·ªßa m√£ th·ª±c thi."""
        # Ki·ªÉm tra magic numbers c·ªßa PE, ELF, ho·∫∑c Mach-O
        exe_signatures = [
            b'MZ',  # Windows PE
            b'\x7fELF',  # Linux ELF
            b'\xca\xfe\xba\xbe',  # Mach-O
            b'\xcf\xfa\xed\xfe'  # Mach-O 64-bit
        ]
        return any(sig in content for sig in exe_signatures)
        
    def get_summary(self) -> str:
        """T·∫°o b·∫£n t√≥m t·∫Øt k·∫øt qu·∫£ ph√¢n t√≠ch."""
        if not self.analysis_results:
            return "‚ùå Ch∆∞a c√≥ k·∫øt qu·∫£ ph√¢n t√≠ch"
            
        if "error" in self.analysis_results:
            return f"‚ùå L·ªñI: {self.analysis_results['error']}"
            
        file_info = self.analysis_results["file_info"]
        structure = self.analysis_results["structure"]
        byte_analysis = self.analysis_results["byte_analysis"]
        
        summary = [
            "üìä K·∫æT QU·∫¢ PH√ÇN T√çCH CHI TI·∫æT",
            f"- T√™n file: {file_info['name']}",
            f"- K√≠ch th∆∞·ªõc: {file_info['size']:,} bytes",
            f"- Lo·∫°i d·ªØ li·ªáu: {structure['structure_type']}",
            f"- Protocol pickle: {structure['protocol_version']}",
            f"- T·ªïng s·ªë opcodes: {structure['total_opcodes']}",
            f"- Entropy: {byte_analysis['entropy']:.2f}",
            f"- C√≥ m√£ th·ª±c thi: {'C√≥' if byte_analysis['has_executable_content'] else 'Kh√¥ng'}"
        ]
        
        return "\n".join(summary)