
import sys
import shutil
from pathlib import Path
from verimodel.static_scanner import StaticScanner
from verimodel.dynamic_scanner import DynamicScanner
from verimodel.file_analyzer import FileAnalyzer
from verimodel.virtual_scan_dir import create_virtual_scan_dir
from rich.console import Console
from rich.panel import Panel
from rich.table import Table
from rich import box
import tkinter as tk
from tkinter import ttk, filedialog, messagebox, scrolledtext

class VeriModelGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("üõ°Ô∏è VeriModel - AI Supply Chain Firewall")
        self.console = Console()
        self.file_path = None
        self.analyze_file_path = None
        self.setup_ui()

    def setup_ui(self):
        # Notebook ƒë·ªÉ t·∫°o c√°c tab
        self.notebook = ttk.Notebook(self.root)
        self.notebook.pack(fill='both', expand=True, padx=10, pady=5)
        
        # Tab qu√©t
        self.scan_frame = ttk.Frame(self.notebook)
        self.notebook.add(self.scan_frame, text='Qu√©t an to√†n')
        
        # Tab ph√¢n t√≠ch
        self.analyze_frame = ttk.Frame(self.notebook)
        self.notebook.add(self.analyze_frame, text='Ph√¢n t√≠ch chi ti·∫øt')
        
        self.setup_scan_tab()
        self.setup_analyze_tab()

    def setup_scan_tab(self):
        # File selection
        frame = tk.Frame(self.scan_frame)
        frame.pack(pady=10)
        tk.Label(frame, text="Ch·ªçn file pickle ƒë·ªÉ qu√©t:").pack(side=tk.LEFT)
        self.file_entry = tk.Entry(frame, width=50)
        self.file_entry.pack(side=tk.LEFT, padx=5)
        tk.Button(frame, text="Browse", command=self.browse_file).pack(side=tk.LEFT)

        # Scan options
        options = tk.Frame(self.scan_frame)
        options.pack(pady=5)
        self.static_var = tk.BooleanVar(value=True)
        self.dynamic_var = tk.BooleanVar(value=True)
        tk.Checkbutton(options, text="Qu√©t tƒ©nh", variable=self.static_var).pack(side=tk.LEFT)
        tk.Checkbutton(options, text="Qu√©t ƒë·ªông", variable=self.dynamic_var).pack(side=tk.LEFT)
        tk.Button(options, text="Qu√©t ngay", command=self.scan).pack(side=tk.LEFT, padx=10)

        # Scan output area
        self.scan_output = scrolledtext.ScrolledText(self.scan_frame, width=90, height=30, font=("Consolas", 10))
        self.scan_output.pack(padx=10, pady=10)
        self.scan_output.config(state=tk.DISABLED)

    def setup_analyze_tab(self):
        # File selection for analysis
        frame = tk.Frame(self.analyze_frame)
        frame.pack(pady=10)
        tk.Label(frame, text="Ch·ªçn file pickle ƒë·ªÉ ph√¢n t√≠ch:").pack(side=tk.LEFT)
        self.analyze_file_entry = tk.Entry(frame, width=50)
        self.analyze_file_entry.pack(side=tk.LEFT, padx=5)
        tk.Button(frame, text="Browse", command=self.browse_analyze_file).pack(side=tk.LEFT)

        # Analysis button
        tk.Button(self.analyze_frame, text="üîç Ph√¢n t√≠ch chi ti·∫øt", command=self.analyze).pack(pady=10)

        # Analysis results area with tabs
        self.analysis_notebook = ttk.Notebook(self.analyze_frame)
        self.analysis_notebook.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)

        # Tab cho c·∫•u tr√∫c file
        self.structure_frame = ttk.Frame(self.analysis_notebook)
        self.analysis_notebook.add(self.structure_frame, text='C·∫•u tr√∫c')
        self.structure_text = scrolledtext.ScrolledText(self.structure_frame, height=25, font=("Consolas", 10))
        self.structure_text.pack(fill=tk.BOTH, expand=True)

        # Tab cho th√¥ng tin entropy v√† byte
        self.byte_frame = ttk.Frame(self.analysis_notebook)
        self.analysis_notebook.add(self.byte_frame, text='Th√¥ng tin Byte')
        self.byte_text = scrolledtext.ScrolledText(self.byte_frame, height=25, font=("Consolas", 10))
        self.byte_text.pack(fill=tk.BOTH, expand=True)

        # Tab cho opcodes
        self.opcode_frame = ttk.Frame(self.analysis_notebook)
        self.analysis_notebook.add(self.opcode_frame, text='Opcodes')
        self.opcode_text = scrolledtext.ScrolledText(self.opcode_frame, height=25, font=("Consolas", 10))
        self.opcode_text.pack(fill=tk.BOTH, expand=True)

    def browse_file(self):
        file_path = filedialog.askopenfilename(
            filetypes=[("Pickle files", "*.pkl;*.pickle;*.pth"), ("All files", "*.*")]
        )
        if file_path:
            self.file_path = file_path
            self.file_entry.delete(0, tk.END)
            self.file_entry.insert(0, file_path)

    def browse_analyze_file(self):
        file_path = filedialog.askopenfilename(
            filetypes=[("Pickle files", "*.pkl;*.pickle;*.pth"), ("All files", "*.*")]
        )
        if file_path:
            self.analyze_file_path = file_path
            self.analyze_file_entry.delete(0, tk.END)
            self.analyze_file_entry.insert(0, file_path)

    def analyze(self):
        if not self.analyze_file_path:
            messagebox.showerror("L·ªói", "Vui l√≤ng ch·ªçn file ƒë·ªÉ ph√¢n t√≠ch!")
            return

        try:
            analyzer = FileAnalyzer()
            file_path = Path(self.analyze_file_path)
            
            # Reset all text areas
            self.structure_text.delete(1.0, tk.END)
            self.byte_text.delete(1.0, tk.END)
            self.opcode_text.delete(1.0, tk.END)
            
            # Configure text tags for highlighting
            for text_widget in [self.structure_text, self.byte_text, self.opcode_text]:
                text_widget.tag_configure("warning", foreground="orange")
                text_widget.tag_configure("danger", foreground="red")
                text_widget.tag_configure("safe", foreground="green")
                text_widget.tag_configure("header", font=("Consolas", 11, "bold"))
            
            # Ph√¢n t√≠ch t·ªïng th·ªÉ file
            analysis_results = analyzer.analyze_file(file_path)
            if "error" in analysis_results:
                raise Exception(analysis_results["error"])

            # Hi·ªÉn th·ªã th√¥ng tin c·∫•u tr√∫c v√† m·ª•c ƒë√≠ch
            self.structure_text.insert(tk.END, "=== TH√îNG TIN C·∫§U TR√öC V√Ä M·ª§C ƒê√çCH FILE ===\n\n", "header")
            structure_info = analysis_results.get("structure", {})
            if structure_info:
                # Ph√¢n t√≠ch m·ª•c ƒë√≠ch
                purpose_info = self.analyze_file_purpose(structure_info)
                self.structure_text.insert(tk.END, "PH√ÇN T√çCH M·ª§C ƒê√çCH:\n", "header")
                self.structure_text.insert(tk.END, f"{purpose_info['description']}\n", 
                                        purpose_info['tag'])
                self.structure_text.insert(tk.END, f"M·ª©c ƒë·ªô tin c·∫≠y: {purpose_info['trust_level']}\n\n", 
                                        purpose_info['trust_tag'])
                
                # Th√¥ng tin c·∫•u tr√∫c
                self.structure_text.insert(tk.END, "TH√îNG TIN C·∫§U TR√öC:\n", "header")
                data_type = structure_info.get('structure_type', 'Kh√¥ng x√°c ƒë·ªãnh')
                self.structure_text.insert(tk.END, f"- Lo·∫°i d·ªØ li·ªáu: {data_type}\n",
                                        "warning" if data_type == "Pickle" else "safe")
                self.structure_text.insert(tk.END, f"- Protocol Pickle: {structure_info.get('protocol_version', 'Kh√¥ng x√°c ƒë·ªãnh')}\n")
                total_opcodes = structure_info.get('total_opcodes', 0)
                self.structure_text.insert(tk.END, f"- T·ªïng s·ªë opcodes: {total_opcodes}\n",
                                        "warning" if total_opcodes > 100 else "safe")
                if 'opcode_distribution' in structure_info:
                    self.structure_text.insert(tk.END, "Ph√¢n b·ªë Opcodes:\n")
                    for opcode, count in structure_info['opcode_distribution'].items():
                        self.structure_text.insert(tk.END, f"  {opcode}: {count}\n")

            # Hi·ªÉn th·ªã th√¥ng tin byte v√† entropy
            self.byte_text.insert(tk.END, "=== TH√îNG TIN BYTE V√Ä ENTROPY ===\n\n")
            byte_info = analysis_results.get("byte_analysis", {})
            if byte_info:
                self.byte_text.insert(tk.END, f"- K√≠ch th∆∞·ªõc: {byte_info.get('file_size_bytes', 0):,} bytes\n")
                self.byte_text.insert(tk.END, f"- Entropy: {byte_info.get('entropy', 0):.4f}\n")
                self.byte_text.insert(tk.END, f"- C√≥ byte null: {'C√≥' if byte_info.get('has_null_bytes') else 'Kh√¥ng'}\n")
                self.byte_text.insert(tk.END, f"- C√≥ m√£ th·ª±c thi: {'C√≥ ‚ö†Ô∏è' if byte_info.get('has_executable_content') else 'Kh√¥ng'}\n\n")
                if 'byte_distribution' in byte_info:
                    self.byte_text.insert(tk.END, "Top 10 byte ph·ªï bi·∫øn nh·∫•t:\n")
                    sorted_bytes = sorted(byte_info['byte_distribution'].items(), 
                                       key=lambda x: x[1], reverse=True)[:10]
                    for byte_val, count in sorted_bytes:
                        self.byte_text.insert(tk.END, f"  Byte {byte_val}: {count} l·∫ßn\n")

            # Hi·ªÉn th·ªã summary v√† opcodes ƒë√°ng ng·ªù
            self.opcode_text.insert(tk.END, "=== T√ìM T·∫ÆT PH√ÇN T√çCH ===\n\n", "header")
            summary = analyzer.get_summary()
            
            # Highlight c√°c opcode ƒë√°ng ng·ªù
            suspicious_opcodes = ['GLOBAL', 'REDUCE', 'EXEC', 'SYSTEM', 'LOAD', 'BUILD']
            for opcode in suspicious_opcodes:
                if opcode in summary:
                    start_idx = summary.find(opcode)
                    end_idx = start_idx + len(opcode)
                    self.opcode_text.insert(tk.END, summary[:start_idx])
                    self.opcode_text.insert(tk.END, opcode, "danger")
                    self.opcode_text.insert(tk.END, summary[end_idx:])
                    break
            else:
                self.opcode_text.insert(tk.END, summary)

            # N·∫øu ph√°t hi·ªán m√£ ƒë·ªôc, hi·ªán c·∫£nh b√°o popup
            if any(opcode in summary for opcode in suspicious_opcodes):
                messagebox.showwarning(
                    "‚ö†Ô∏è C·∫£nh b√°o B·∫£o m·∫≠t",
                    "File n√†y ch·ª©a m√£ c√≥ th·ªÉ th·ª±c thi (executable code)!\n\n" +
                    "‚ùå KH√îNG N√äN s·ª≠ d·ª•ng file n√†y trong m√¥i tr∆∞·ªùng production.\n" +
                    "‚ö†Ô∏è Ch·ªâ s·ª≠ d·ª•ng t·ª´ ngu·ªìn ƒë√°ng tin c·∫≠y."
                )

        except Exception as e:
            error_msg = f"‚ùå L·ªói khi ph√¢n t√≠ch: {str(e)}"
            messagebox.showerror("L·ªói", f"L·ªói khi ph√¢n t√≠ch file: {str(e)}")
            for widget in [self.structure_text, self.byte_text, self.opcode_text]:
                widget.delete(1.0, tk.END)
                widget.insert(tk.END, error_msg, "danger")

    def scan(self):
        if not self.file_path:
            messagebox.showerror("L·ªói", "Vui l√≤ng ch·ªçn file ƒë·ªÉ qu√©t!")
            return

        self.scan_output.config(state=tk.NORMAL)
        self.scan_output.delete(1.0, tk.END)
        
        # Configure text tags for highlighting
        self.scan_output.tag_configure("header", font=("Consolas", 11, "bold"))
        self.scan_output.tag_configure("danger", foreground="red", font=("Consolas", 10, "bold"))
        self.scan_output.tag_configure("warning", foreground="orange")
        self.scan_output.tag_configure("safe", foreground="green")
        self.scan_output.tag_configure("info", foreground="blue")
        
        scan_dir = None
        cleanup = None
        
        try:
            # T·∫°o th∆∞ m·ª•c ·∫£o an to√†n ƒë·ªÉ qu√©t
            try:
                scan_dir, cleanup = create_virtual_scan_dir()
            except Exception as e:
                raise Exception(f"Kh√¥ng th·ªÉ t·∫°o th∆∞ m·ª•c ·∫£o: {str(e)}")

            if not scan_dir or not scan_dir.exists():
                raise Exception("Kh√¥ng th·ªÉ t·∫°o th∆∞ m·ª•c ·∫£o ƒë·ªÉ qu√©t an to√†n")

            # Copy file v√†o th∆∞ m·ª•c ·∫£o
            try:
                target_path = scan_dir / Path(self.file_path).name
                shutil.copy2(self.file_path, target_path)
            except Exception as e:
                raise Exception(f"Kh√¥ng th·ªÉ copy file v√†o th∆∞ m·ª•c ·∫£o: {str(e)}")

            results = {}
            
            # Qu√©t tƒ©nh
            if self.static_var.get():
                self.scan_output.insert(tk.END, "[Qu√©t tƒ©nh]\n")
                try:
                    static_scanner = StaticScanner()
                    static_results = static_scanner.scan_file(target_path)
                    results["static"] = static_results
                    self.scan_output.insert(tk.END, self.format_scan_results(static_results, "static") + "\n\n")
                except Exception as e:
                    self.scan_output.insert(tk.END, f"‚ùå L·ªói qu√©t tƒ©nh: {str(e)}\n\n")

            # Qu√©t ƒë·ªông
            if self.dynamic_var.get():
                self.scan_output.insert(tk.END, "[Qu√©t ƒë·ªông]\n")
                try:
                    dynamic_scanner = DynamicScanner()
                    if not dynamic_scanner.is_supported():
                        self.scan_output.insert(tk.END, "‚ö†Ô∏è Qu√©t ƒë·ªông ch·ªâ h·ªó tr·ª£ tr√™n Linux.\n\n")
                    else:
                        dynamic_results = dynamic_scanner.scan(str(target_path))
                        results["dynamic"] = dynamic_results
                        self.scan_output.insert(tk.END, self.format_scan_results(dynamic_results, "dynamic") + "\n\n")
                except Exception as e:
                    self.scan_output.insert(tk.END, f"‚ùå L·ªói qu√©t ƒë·ªông: {str(e)}\n\n")

            # Hi·ªÉn th·ªã k·∫øt lu·∫≠n cu·ªëi c√πng n·∫øu c√≥ k·∫øt qu·∫£
            if results:
                verdict = self.get_final_verdict(results)
                if verdict:
                    self.scan_output.insert(tk.END, verdict)
            else:
                self.scan_output.insert(tk.END, "\n‚ùå Kh√¥ng c√≥ k·∫øt qu·∫£ qu√©t n√†o th√†nh c√¥ng.")
                
        except Exception as e:
            self.scan_output.insert(tk.END, f"‚ùå L·ªói: {str(e)}")
        
        finally:
            # ƒê·∫£m b·∫£o d·ªçn d·∫πp th∆∞ m·ª•c t·∫°m
            if cleanup:
                try:
                    cleanup()
                except Exception as e_cleanup:
                    self.scan_output.insert(tk.END, f"\n‚ö†Ô∏è L·ªói khi d·ªçn d·∫πp th∆∞ m·ª•c t·∫°m: {str(e_cleanup)}")
            
            self.scan_output.config(state=tk.DISABLED)

    def format_scan_results(self, results, scan_type):
        if not results:
            return "‚ùå Kh√¥ng c√≥ k·∫øt qu·∫£ qu√©t"
        
        if isinstance(results, dict) and "error" in results:
            return f"‚ùå L·ªói: {results['error']}"
        
        output = []
        scan_label = "tƒ©nh" if scan_type == "static" else "ƒë·ªông"
        self.scan_output.insert(tk.END, f"K·∫øt qu·∫£ qu√©t {scan_label}:\n", "header")
        
        # L·∫•y threats v√† warnings t·ª´ ƒë·ªëi t∆∞·ª£ng k·∫øt qu·∫£
        threats = []
        warnings = []
        
        # N·∫øu l√† dict, l·∫•y t·ª´ key 'threats' v√† 'warnings'
        if isinstance(results, dict):
            threats = results.get('threats', [])
            warnings = results.get('warnings', [])
        # N·∫øu l√† object c√≥ thu·ªôc t√≠nh threats v√† warnings
        else:
            threats = getattr(results, 'threats', []) if hasattr(results, 'threats') else []
            warnings = getattr(results, 'warnings', []) if hasattr(results, 'warnings') else []
        
        if threats:
            self.scan_output.insert(tk.END, f"\nPh√°t hi·ªán {len(threats)} m·ªëi nguy:\n", "danger")
            for i, threat in enumerate(threats, 1):
                # N·∫øu threat l√† dict
                if isinstance(threat, dict):
                    severity = threat.get('severity', 'WARNING')
                    desc = threat.get('description', str(threat))
                # N·∫øu threat l√† object
                else:
                    severity = getattr(threat, 'severity', 'WARNING')
                    desc = getattr(threat, 'description', str(threat))
                tag = "danger" if severity.upper() == "CRITICAL" else "warning"
                self.scan_output.insert(tk.END, f"  {i}. [{severity.upper()}] {desc}\n", tag)
        else:
            self.scan_output.insert(tk.END, "‚úÖ Kh√¥ng ph√°t hi·ªán m·ªëi nguy\n", "safe")
            
        if warnings:
            output.append(f"\nC·∫£nh b√°o ({len(warnings)}):")
            for i, warning in enumerate(warnings, 1):
                output.append(f"  {i}. {str(warning)}")
                
        return "\n".join(output)

    def analyze_file_purpose(self, structure_info):
        """Ph√¢n t√≠ch m·ª•c ƒë√≠ch c·ªßa file d·ª±a tr√™n c·∫•u tr√∫c"""
        purpose_info = {
            'description': '',
            'trust_level': '',
            'tag': 'safe',
            'trust_tag': 'safe'
        }
        
        structure_type = structure_info.get('structure_type', '').lower()
        opcodes = structure_info.get('opcode_distribution', {})
        total_opcodes = structure_info.get('total_opcodes', 0)
        
        # Ph√¢n t√≠ch m·ª•c ƒë√≠ch d·ª±a tr√™n lo·∫°i file
        if 'pickle' in structure_type:
            if total_opcodes < 50:
                purpose_info['description'] = "File n√†y c√≥ v·∫ª l√† m·ªôt m√¥ h√¨nh ML ƒë∆°n gi·∫£n ho·∫∑c tensor d·ªØ li·ªáu."
                purpose_info['trust_level'] = "ƒê·ªô tin c·∫≠y cao"
            else:
                purpose_info['description'] = "‚ö†Ô∏è File n√†y ch·ª©a nhi·ªÅu opcode ph·ª©c t·∫°p, c√≥ th·ªÉ l√† m√¥ h√¨nh ML ph·ª©c t·∫°p ho·∫∑c c√≥ m√£ ƒë√°ng ng·ªù."
                purpose_info['trust_level'] = "‚ö†Ô∏è ƒê·ªô tin c·∫≠y th·∫•p"
                purpose_info['tag'] = 'warning'
                purpose_info['trust_tag'] = 'warning'
                
        elif 'torch' in structure_type:
            if 'GLOBAL' in opcodes or 'REDUCE' in opcodes:
                purpose_info['description'] = "üö® File n√†y ch·ª©a m√£ Python c√≥ th·ªÉ th·ª±c thi - C·∫¶N TH·∫¨N TR·ªåNG!"
                purpose_info['trust_level'] = "üö® KH√îNG TIN C·∫¨Y"
                purpose_info['tag'] = 'danger'
                purpose_info['trust_tag'] = 'danger'
            else:
                purpose_info['description'] = "File n√†y c√≥ v·∫ª l√† m·ªôt m√¥ h√¨nh PyTorch b√¨nh th∆∞·ªùng."
                purpose_info['trust_level'] = "ƒê·ªô tin c·∫≠y trung b√¨nh"
                
        else:
            purpose_info['description'] = "Kh√¥ng th·ªÉ x√°c ƒë·ªãnh ch√≠nh x√°c m·ª•c ƒë√≠ch c·ªßa file n√†y."
            purpose_info['trust_level'] = "Kh√¥ng x√°c ƒë·ªãnh"
            purpose_info['tag'] = 'warning'
            purpose_info['trust_tag'] = 'warning'
            
        return purpose_info

    def get_final_verdict(self, results):
        if not results:
            return None
            
        is_safe = True
        warnings = []
        threats = []

        for scan_type, result in results.items():
            if not result:
                continue
                
            scan_label = "tƒ©nh" if scan_type == "static" else "ƒë·ªông"
            
            # L·∫•y threats v√† warnings t·ª´ k·∫øt qu·∫£
            result_threats = []
            result_warnings = []
            
            # N·∫øu result l√† dict
            if isinstance(result, dict):
                result_threats = result.get('threats', [])
                result_warnings = result.get('warnings', [])
            # N·∫øu result l√† object
            else:
                result_threats = getattr(result, 'threats', []) if hasattr(result, 'threats') else []
                result_warnings = getattr(result, 'warnings', []) if hasattr(result, 'warnings') else []
            
            if result_threats:
                is_safe = False
                for threat in result_threats:
                    severity = threat.severity if hasattr(threat, 'severity') else 'WARNING'
                    desc = threat.description if hasattr(threat, 'description') else str(threat)
                    threats.append(f"[{severity.upper()}] {desc} (qu√©t {scan_label})")
            
            warnings.extend([f"{str(w)} (qu√©t {scan_label})" for w in result_warnings])

        self.scan_output.insert(tk.END, "\n=== K·∫æT LU·∫¨N CU·ªêI C√ôNG ===\n", "header")
        
        if is_safe:
            verdict = "‚úÖ FILE AN TO√ÄN"
            verdict_tag = "safe"
            messagebox.showinfo("K·∫øt qu·∫£ Qu√©t", "File n√†y AN TO√ÄN ƒë·ªÉ s·ª≠ d·ª•ng! ‚úÖ")
        else:
            verdict = "üö® FILE NGUY HI·ªÇM"
            verdict_tag = "danger"
            messagebox.showwarning(
                "‚ö†Ô∏è Ph√°t hi·ªán M√£ ƒë·ªôc",
                "File n√†y c√≥ th·ªÉ NGUY HI·ªÇM! üö®\n\n" +
                "L√Ω do:\n" + "\n".join(f"‚Ä¢ {t}" for t in threats) + "\n\n" +
                "‚ùå KH√îNG N√äN s·ª≠ d·ª•ng file n√†y!"
            )
            
        self.scan_output.insert(tk.END, f"\n{verdict}\n", verdict_tag)
        if is_safe:
            self.scan_output.insert(tk.END, "Kh√¥ng ph√°t hi·ªán m√£ ƒë·ªôc ho·∫∑c h√†nh vi nguy hi·ªÉm.\n", "safe")
        else:
            self.scan_output.insert(tk.END, "L√Ω do:\n", "danger")
            for threat in threats:
                self.scan_output.insert(tk.END, f"  ‚Ä¢ {threat}\n", "danger")
            self.scan_output.insert(tk.END, "\n‚ö†Ô∏è KHUY·∫æN C√ÅO: KH√îNG s·ª≠ d·ª•ng file n√†y trong m√¥i tr∆∞·ªùng production!\n", "warning")
            
            if warnings:
                self.scan_output.insert(tk.END, "\nC·∫£nh b√°o:\n", "warning")
                for warning in warnings:
                    self.scan_output.insert(tk.END, f"  ‚Ä¢ {warning}\n", "warning")
                    
        return None

def main():
    root = tk.Tk()
    # Set window icon
    try:
        ico_path = Path(__file__).parent / "shield.ico"
        if ico_path.exists():
            root.iconbitmap(ico_path)
    except:
        pass  # Skip icon if not found
        
    # Center window
    window_width = 800
    window_height = 600
    screen_width = root.winfo_screenwidth()
    screen_height = root.winfo_screenheight()
    center_x = int(screen_width/2 - window_width/2)
    center_y = int(screen_height/2 - window_height/2)
    root.geometry(f'{window_width}x{window_height}+{center_x}+{center_y}')
    
    app = VeriModelGUI(root)
    root.mainloop()

if __name__ == "__main__":
    main()
